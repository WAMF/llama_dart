// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// Generated by `package:ffigen`.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for llama.cpp wrapper
class LlamaBindingsGenerated {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LlamaBindingsGenerated(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LlamaBindingsGenerated.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Backend initialization
  void llama_backend_init_wrapper() {
    return _llama_backend_init_wrapper();
  }

  late final _llama_backend_init_wrapperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'llama_backend_init_wrapper');
  late final _llama_backend_init_wrapper =
      _llama_backend_init_wrapperPtr.asFunction<void Function()>();

  /// Default parameters
  llama_model_params_wrapper llama_model_default_params_wrapper() {
    return _llama_model_default_params_wrapper();
  }

  late final _llama_model_default_params_wrapperPtr =
      _lookup<ffi.NativeFunction<llama_model_params_wrapper Function()>>(
          'llama_model_default_params_wrapper');
  late final _llama_model_default_params_wrapper =
      _llama_model_default_params_wrapperPtr
          .asFunction<llama_model_params_wrapper Function()>();

  llama_context_params_wrapper llama_context_default_params_wrapper() {
    return _llama_context_default_params_wrapper();
  }

  late final _llama_context_default_params_wrapperPtr =
      _lookup<ffi.NativeFunction<llama_context_params_wrapper Function()>>(
          'llama_context_default_params_wrapper');
  late final _llama_context_default_params_wrapper =
      _llama_context_default_params_wrapperPtr
          .asFunction<llama_context_params_wrapper Function()>();

  llama_sampler_chain_params_wrapper
      llama_sampler_chain_default_params_wrapper() {
    return _llama_sampler_chain_default_params_wrapper();
  }

  late final _llama_sampler_chain_default_params_wrapperPtr = _lookup<
          ffi.NativeFunction<llama_sampler_chain_params_wrapper Function()>>(
      'llama_sampler_chain_default_params_wrapper');
  late final _llama_sampler_chain_default_params_wrapper =
      _llama_sampler_chain_default_params_wrapperPtr
          .asFunction<llama_sampler_chain_params_wrapper Function()>();

  /// Model operations
  ffi.Pointer<llama_model> llama_model_load_from_file_wrapper(
    ffi.Pointer<ffi.Char> path,
    llama_model_params_wrapper params,
  ) {
    return _llama_model_load_from_file_wrapper(
      path,
      params,
    );
  }

  late final _llama_model_load_from_file_wrapperPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<llama_model> Function(
                  ffi.Pointer<ffi.Char>, llama_model_params_wrapper)>>(
      'llama_model_load_from_file_wrapper');
  late final _llama_model_load_from_file_wrapper =
      _llama_model_load_from_file_wrapperPtr.asFunction<
          ffi.Pointer<llama_model> Function(
              ffi.Pointer<ffi.Char>, llama_model_params_wrapper)>();

  void llama_model_free_wrapper(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_free_wrapper(
      model,
    );
  }

  late final _llama_model_free_wrapperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_model>)>>(
          'llama_model_free_wrapper');
  late final _llama_model_free_wrapper = _llama_model_free_wrapperPtr
      .asFunction<void Function(ffi.Pointer<llama_model>)>();

  /// Context operations
  ffi.Pointer<llama_context> llama_init_from_model_wrapper(
    ffi.Pointer<llama_model> model,
    llama_context_params_wrapper params,
  ) {
    return _llama_init_from_model_wrapper(
      model,
      params,
    );
  }

  late final _llama_init_from_model_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_context> Function(ffi.Pointer<llama_model>,
              llama_context_params_wrapper)>>('llama_init_from_model_wrapper');
  late final _llama_init_from_model_wrapper =
      _llama_init_from_model_wrapperPtr.asFunction<
          ffi.Pointer<llama_context> Function(
              ffi.Pointer<llama_model>, llama_context_params_wrapper)>();

  void llama_free_wrapper(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_free_wrapper(
      ctx,
    );
  }

  late final _llama_free_wrapperPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_free_wrapper');
  late final _llama_free_wrapper = _llama_free_wrapperPtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  void llama_kv_cache_clear_wrapper(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_kv_cache_clear_wrapper(
      ctx,
    );
  }

  late final _llama_kv_cache_clear_wrapperPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_context>)>>(
      'llama_kv_cache_clear_wrapper');
  late final _llama_kv_cache_clear_wrapper = _llama_kv_cache_clear_wrapperPtr
      .asFunction<void Function(ffi.Pointer<llama_context>)>();

  /// Tokenization
  int llama_tokenize_wrapper(
    ffi.Pointer<llama_vocab> vocab,
    ffi.Pointer<ffi.Char> text,
    int text_len,
    ffi.Pointer<ffi.Int32> tokens,
    int n_tokens_max,
    bool add_special,
    bool parse_special,
  ) {
    return _llama_tokenize_wrapper(
      vocab,
      text,
      text_len,
      tokens,
      n_tokens_max,
      add_special,
      parse_special,
    );
  }

  late final _llama_tokenize_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_vocab>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('llama_tokenize_wrapper');
  late final _llama_tokenize_wrapper = _llama_tokenize_wrapperPtr.asFunction<
      int Function(ffi.Pointer<llama_vocab>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Int32>, int, bool, bool)>();

  /// Batch operations
  llama_batch_wrapper llama_batch_get_one_wrapper(
    ffi.Pointer<ffi.Int32> tokens,
    int n_tokens,
  ) {
    return _llama_batch_get_one_wrapper(
      tokens,
      n_tokens,
    );
  }

  late final _llama_batch_get_one_wrapperPtr = _lookup<
      ffi.NativeFunction<
          llama_batch_wrapper Function(ffi.Pointer<ffi.Int32>,
              ffi.Int32)>>('llama_batch_get_one_wrapper');
  late final _llama_batch_get_one_wrapper = _llama_batch_get_one_wrapperPtr
      .asFunction<llama_batch_wrapper Function(ffi.Pointer<ffi.Int32>, int)>();

  int llama_decode_wrapper(
    ffi.Pointer<llama_context> ctx,
    llama_batch_wrapper batch,
  ) {
    return _llama_decode_wrapper(
      ctx,
      batch,
    );
  }

  late final _llama_decode_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<llama_context>,
              llama_batch_wrapper)>>('llama_decode_wrapper');
  late final _llama_decode_wrapper = _llama_decode_wrapperPtr.asFunction<
      int Function(ffi.Pointer<llama_context>, llama_batch_wrapper)>();

  /// Sampling
  ffi.Pointer<llama_sampler> llama_sampler_chain_init_wrapper(
    llama_sampler_chain_params_wrapper params,
  ) {
    return _llama_sampler_chain_init_wrapper(
      params,
    );
  }

  late final _llama_sampler_chain_init_wrapperPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<llama_sampler> Function(
                  llama_sampler_chain_params_wrapper)>>(
      'llama_sampler_chain_init_wrapper');
  late final _llama_sampler_chain_init_wrapper =
      _llama_sampler_chain_init_wrapperPtr.asFunction<
          ffi.Pointer<llama_sampler> Function(
              llama_sampler_chain_params_wrapper)>();

  void llama_sampler_chain_add_wrapper(
    ffi.Pointer<llama_sampler> chain,
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_chain_add_wrapper(
      chain,
      smpl,
    );
  }

  late final _llama_sampler_chain_add_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<llama_sampler>,
              ffi.Pointer<llama_sampler>)>>('llama_sampler_chain_add_wrapper');
  late final _llama_sampler_chain_add_wrapper =
      _llama_sampler_chain_add_wrapperPtr.asFunction<
          void Function(
              ffi.Pointer<llama_sampler>, ffi.Pointer<llama_sampler>)>();

  ffi.Pointer<llama_sampler> llama_sampler_init_top_k_wrapper(
    int k,
  ) {
    return _llama_sampler_init_top_k_wrapper(
      k,
    );
  }

  late final _llama_sampler_init_top_k_wrapperPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<llama_sampler> Function(ffi.Int32)>>(
      'llama_sampler_init_top_k_wrapper');
  late final _llama_sampler_init_top_k_wrapper =
      _llama_sampler_init_top_k_wrapperPtr
          .asFunction<ffi.Pointer<llama_sampler> Function(int)>();

  ffi.Pointer<llama_sampler> llama_sampler_init_top_p_wrapper(
    double p,
    int min_keep,
  ) {
    return _llama_sampler_init_top_p_wrapper(
      p,
      min_keep,
    );
  }

  late final _llama_sampler_init_top_p_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_sampler> Function(
              ffi.Float, ffi.Size)>>('llama_sampler_init_top_p_wrapper');
  late final _llama_sampler_init_top_p_wrapper =
      _llama_sampler_init_top_p_wrapperPtr
          .asFunction<ffi.Pointer<llama_sampler> Function(double, int)>();

  ffi.Pointer<llama_sampler> llama_sampler_init_temp_wrapper(
    double t,
  ) {
    return _llama_sampler_init_temp_wrapper(
      t,
    );
  }

  late final _llama_sampler_init_temp_wrapperPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<llama_sampler> Function(ffi.Float)>>(
      'llama_sampler_init_temp_wrapper');
  late final _llama_sampler_init_temp_wrapper =
      _llama_sampler_init_temp_wrapperPtr
          .asFunction<ffi.Pointer<llama_sampler> Function(double)>();

  ffi.Pointer<llama_sampler> llama_sampler_init_dist_wrapper(
    int seed,
  ) {
    return _llama_sampler_init_dist_wrapper(
      seed,
    );
  }

  late final _llama_sampler_init_dist_wrapperPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<llama_sampler> Function(ffi.Uint32)>>(
      'llama_sampler_init_dist_wrapper');
  late final _llama_sampler_init_dist_wrapper =
      _llama_sampler_init_dist_wrapperPtr
          .asFunction<ffi.Pointer<llama_sampler> Function(int)>();

  int llama_sampler_sample_wrapper(
    ffi.Pointer<llama_sampler> smpl,
    ffi.Pointer<llama_context> ctx,
    int idx,
  ) {
    return _llama_sampler_sample_wrapper(
      smpl,
      ctx,
      idx,
    );
  }

  late final _llama_sampler_sample_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_sampler>,
              ffi.Pointer<llama_context>,
              ffi.Int32)>>('llama_sampler_sample_wrapper');
  late final _llama_sampler_sample_wrapper =
      _llama_sampler_sample_wrapperPtr.asFunction<
          int Function(
              ffi.Pointer<llama_sampler>, ffi.Pointer<llama_context>, int)>();

  void llama_sampler_free_wrapper(
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_free_wrapper(
      smpl,
    );
  }

  late final _llama_sampler_free_wrapperPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_sampler>)>>(
      'llama_sampler_free_wrapper');
  late final _llama_sampler_free_wrapper = _llama_sampler_free_wrapperPtr
      .asFunction<void Function(ffi.Pointer<llama_sampler>)>();

  void llama_sampler_reset_wrapper(
    ffi.Pointer<llama_sampler> smpl,
  ) {
    return _llama_sampler_reset_wrapper(
      smpl,
    );
  }

  late final _llama_sampler_reset_wrapperPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<llama_sampler>)>>(
      'llama_sampler_reset_wrapper');
  late final _llama_sampler_reset_wrapper = _llama_sampler_reset_wrapperPtr
      .asFunction<void Function(ffi.Pointer<llama_sampler>)>();

  /// Vocabulary operations
  ffi.Pointer<llama_vocab> llama_model_get_vocab_wrapper(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_get_vocab_wrapper(
      model,
    );
  }

  late final _llama_model_get_vocab_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<llama_vocab> Function(
              ffi.Pointer<llama_model>)>>('llama_model_get_vocab_wrapper');
  late final _llama_model_get_vocab_wrapper =
      _llama_model_get_vocab_wrapperPtr.asFunction<
          ffi.Pointer<llama_vocab> Function(ffi.Pointer<llama_model>)>();

  int llama_token_to_piece_wrapper(
    ffi.Pointer<llama_vocab> vocab,
    int token,
    ffi.Pointer<ffi.Char> buf,
    int length,
    int lstrip,
    bool special,
  ) {
    return _llama_token_to_piece_wrapper(
      vocab,
      token,
      buf,
      length,
      lstrip,
      special,
    );
  }

  late final _llama_token_to_piece_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<llama_vocab>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32,
              ffi.Bool)>>('llama_token_to_piece_wrapper');
  late final _llama_token_to_piece_wrapper =
      _llama_token_to_piece_wrapperPtr.asFunction<
          int Function(ffi.Pointer<llama_vocab>, int, ffi.Pointer<ffi.Char>,
              int, int, bool)>();

  /// Token IDs
  int llama_token_bos_wrapper() {
    return _llama_token_bos_wrapper();
  }

  late final _llama_token_bos_wrapperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'llama_token_bos_wrapper');
  late final _llama_token_bos_wrapper =
      _llama_token_bos_wrapperPtr.asFunction<int Function()>();

  int llama_token_eos_wrapper() {
    return _llama_token_eos_wrapper();
  }

  late final _llama_token_eos_wrapperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'llama_token_eos_wrapper');
  late final _llama_token_eos_wrapper =
      _llama_token_eos_wrapperPtr.asFunction<int Function()>();

  int llama_token_nl_wrapper() {
    return _llama_token_nl_wrapper();
  }

  late final _llama_token_nl_wrapperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'llama_token_nl_wrapper');
  late final _llama_token_nl_wrapper =
      _llama_token_nl_wrapperPtr.asFunction<int Function()>();

  /// Model information
  int llama_n_ctx_wrapper(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_n_ctx_wrapper(
      ctx,
    );
  }

  late final _llama_n_ctx_wrapperPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_context>)>>(
      'llama_n_ctx_wrapper');
  late final _llama_n_ctx_wrapper = _llama_n_ctx_wrapperPtr
      .asFunction<int Function(ffi.Pointer<llama_context>)>();

  int llama_model_n_embd_wrapper(
    ffi.Pointer<llama_model> model,
  ) {
    return _llama_model_n_embd_wrapper(
      model,
    );
  }

  late final _llama_model_n_embd_wrapperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<llama_model>)>>(
          'llama_model_n_embd_wrapper');
  late final _llama_model_n_embd_wrapper = _llama_model_n_embd_wrapperPtr
      .asFunction<int Function(ffi.Pointer<llama_model>)>();

  /// Logits and embeddings
  ffi.Pointer<ffi.Float> llama_get_logits_wrapper(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_get_logits_wrapper(
      ctx,
    );
  }

  late final _llama_get_logits_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<llama_context>)>>('llama_get_logits_wrapper');
  late final _llama_get_logits_wrapper =
      _llama_get_logits_wrapperPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>)>();

  ffi.Pointer<ffi.Float> llama_get_embeddings_wrapper(
    ffi.Pointer<llama_context> ctx,
  ) {
    return _llama_get_embeddings_wrapper(
      ctx,
    );
  }

  late final _llama_get_embeddings_wrapperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<llama_context>)>>('llama_get_embeddings_wrapper');
  late final _llama_get_embeddings_wrapper =
      _llama_get_embeddings_wrapperPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<llama_context>)>();
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

/// Forward declarations
final class llama_model extends ffi.Opaque {}

final class llama_context extends ffi.Opaque {}

final class llama_vocab extends ffi.Opaque {}

final class llama_sampler extends ffi.Opaque {}

/// Wrapper structures
final class llama_model_params_wrapper extends ffi.Struct {
  @ffi.Uint32()
  external int seed;

  @ffi.Uint32()
  external int n_ctx;

  @ffi.Uint32()
  external int n_batch;

  @ffi.Uint32()
  external int n_threads;

  @ffi.Bool()
  external bool use_mmap;

  @ffi.Bool()
  external bool use_mlock;
}

final class llama_context_params_wrapper extends ffi.Struct {
  @ffi.Uint32()
  external int seed;

  @ffi.Uint32()
  external int n_ctx;

  @ffi.Uint32()
  external int n_batch;

  @ffi.Uint32()
  external int n_threads;

  @ffi.Float()
  external double temp;

  @ffi.Float()
  external double top_p;

  @ffi.Float()
  external double repeat_penalty;

  @ffi.Uint32()
  external int repeat_last_n;

  @ffi.Bool()
  external bool use_mmap;

  @ffi.Bool()
  external bool use_mlock;
}

final class llama_sampler_chain_params_wrapper extends ffi.Struct {
  @ffi.Bool()
  external bool no_perf;
}

final class llama_batch_wrapper extends ffi.Struct {
  @ffi.Int32()
  external int n_tokens;

  external ffi.Pointer<ffi.Int32> token;

  external ffi.Pointer<ffi.Float> embd;

  external ffi.Pointer<ffi.Int32> pos;

  external ffi.Pointer<ffi.Int32> n_seq_id;

  external ffi.Pointer<ffi.Pointer<ffi.Int32>> seq_id;

  external ffi.Pointer<ffi.Int8> logits;
}

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int __WORDSIZE = 64;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;
